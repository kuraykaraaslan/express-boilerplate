// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model SystemSetting {
  key String @unique @id
  value String
}

model User {
  userId String  @id @default(cuid())
  name   String?

  email String @unique

  avatar String?

  verified Boolean @default(false)
  verificationToken String?
  verificationTokenExpires DateTime?

  phone Int?   @unique
  phoneVerified Boolean @default(false)
  phoneVerificationToken String?
  phoneVerificationTokenExpires DateTime?

  password String?
  passwordResetToken String?
  passwordResetTokenExpires DateTime?

  emailChangeAddress String?
  emailChangeToken String?
  emailChangeTokenExpires DateTime?

  phoneChangeNumber Int?
  phoneChangeToken String?
  phoneChangeTokenExpires DateTime?

  language String? @default("en")
  theme String? @default("light")
  timezone String? @default("UTC")

  OTPEnabled Boolean @default(false)
  OTPCanUseEmail Boolean @default(false)
  OTPCanUsePhone Boolean @default(false)

  sessions Session[]
  roles String[] @default(["USER"])
  
  lastLogin DateTime?
  lastEmailSent DateTime?
  lastPhoneSent DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  tenantmemberships TenantMember[]

}

model Session {
  token  String @unique @id
  userId String

  expiresAt DateTime

  // Agent
  browser  String?
  os       String?
  device   String?
  platform String?
  ip       String?

  OTPNeeded Boolean @default(false)

  OTPCanUsePhone Boolean @default(false)
  OTPVerificationPhoneCode String?
  OTPVerificationPhoneCodeExpires DateTime?

  OTPCanUseEmail Boolean @default(false)
  OTPVerificationEmailCode String?
  OTPVerificationEmailCodeExpires DateTime?

  user User @relation(fields: [userId], references: [userId])
}

model Incident {
  logId String @id @default(cuid())

  userId String?
  requestId String?
  sessionId String?

  status String  @default("INFO") // INFO, WARN, ERROR
  message String

  path String?
  ip String?

  createdAt DateTime @default(now())
}

// Tenant

model TenantSetting {
  tenantId String
  key String
  value String

  @@id([tenantId, key])
}


// Tenant
model Tenant {
  tenantId String @id @default(cuid())
  name String
  domain String @unique
  logo String?
  favicon String?
  theme String? @default("light")
  language String? @default("en")
  timezone String? @default("UTC")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Members
  members TenantMember[] 
}

model TenantMember {

  tenantMemberId String @id @default(cuid())
  tenantId String
  userId String

  roles String[] @default(["USER"])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status String @default("ACTIVE") // ENABLED, DISABLED

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [tenantId])
  user User @relation(fields: [userId], references: [userId])

}

model TenantMemberInvitation {
  tenantMemberInvitationId String @id @default(cuid())
  tenantId String
  email String
  roles String[] @default(["USER"])

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
}

// S3 Bucket File
model File {

  fileId String @id @default(cuid())

  tenantId String
  userId String

  key String
  url String


  size Int
  mimetype String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  relatedToModel String?
  relatedToId String?

}

// Blog
model Category {
  categoryId String @id @default(cuid())
  name String
  slug String @unique
  description String?

  parentId String?

  parent Category? @relation("CategoryParent", fields: [parentId], references: [categoryId])
  children Category[] @relation("CategoryParent")
  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  postId String @id @default(cuid())
  title String
  slug String @unique
  content String

  status String @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  publishedAt DateTime?

  categoryId String
  category Category @relation(fields: [categoryId], references: [categoryId])

  featuredImage String?

  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


